#pragma once

#include <cppunit/extensions/HelperMacros.h>
#include <boost/icl/closed_interval.hpp>
#include "../Hem/HemEventRegistry.h"

namespace Regulatory { class Layer; };
class EsrGuide;
class SpotEvent;
class UncontrolledStations;

class TC_HemCalque : public CPPUNIT_NS::TestFixture
{
	CPPUNIT_TEST_SUITE( TC_HemCalque );
    CPPUNIT_TEST( solid );
    CPPUNIT_TEST( prolog_epilog );
    CPPUNIT_TEST( some_calqulable );
    CPPUNIT_TEST( load_save );
	CPPUNIT_TEST_SUITE_END();

private:
    void setUp() override;
    void tearDown() override;

private:
	void solid();
    void prolog_epilog();
    void some_calqulable();
    void load_save();
    //    
    static bool match(std::shared_ptr<const SpotEvent> pr, HCode code, int esr);
    static bool match(std::shared_ptr<const SpotEvent> pr, HCode code, EsrKit esr );
    static bool timeLess(std::shared_ptr<const SpotEvent> one, std::shared_ptr<const SpotEvent> two );
    static time_t T( unsigned h, unsigned m, unsigned s );
    bool skipTo( time_t moment );
    void load_only_6101();
    //
    std::unique_ptr<Regulatory::Layer> regul;
    std::unique_ptr<UncontrolledStations> uncontrolledStations;
    std::unique_ptr<EsrGuide> esrGuide;
    std::vector<boost::icl::closed_interval<unsigned int>> m_AutoGeneratedNumbers;
};
